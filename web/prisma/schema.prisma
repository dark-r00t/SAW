generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String       @id @default(cuid())
  name             String?
  email            String?      @unique
  emailVerified    DateTime?
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  image            String?
  accounts         Account[]
  savedCollections Collection[] @relation("savedCollections")
  collections      Collection[]
  likes            Like[]i
  posts            Post[]       @relation("allPosts")
  savedPosts       Post[]       @relation("savedPosts")
  sessions         Session[]
  passwordHash     String
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id          String       @id @default(cuid())
  dateCreated DateTime     @default(now())
  prompt      String
  authorId    String
  imageURL    String
  savedByID   String?
  author      User         @relation("allPosts", fields: [authorId], references: [id])
  savedBy     User?        @relation("savedPosts", fields: [savedByID], references: [id])
  likes       Like[]
  collections Collection[]
}

model Collection {
  id        String  @id @default(cuid())
  userId    String
  name      String
  savedByID String?
  savedBy   User?   @relation("savedCollections", fields: [savedByID], references: [id])
  user      User    @relation(fields: [userId], references: [id])
  posts     Post[]

  @@unique(fields: [id, userId], name: "collectionAndUserId") // added this constraint to let me check multiple conditions for prisma.update
}

model Like {
  userId String
  postID String
  post   Post   @relation(fields: [postID], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, postID])
}
